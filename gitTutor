
#Learn Git
#Git is a distributed version control system
#Git is a free software distributed under the GPL Lisence
#Git has a mutable index called stage
#Git tracks changes
#qiaojian @ qiaojianwm@gmail.com

#change the current dir to a repository that can be managed by git
git init  

#look up the status of the current repository
git status 

#look up the difference between the changed file and the previous committed file
git diff file
#look up the difference betweent two committed versions
git diff  877720c 8faf974
git diff HEAD@{1} HEAD@{0}

#add file to the repository stage
git add file

#to unstage the file which has been added to the stage
git reset HEAD file

#commit the change of the current dir files which has been added to the stage to the repository's current branch
git commit -m "comments messages"

#display the committing log from nearest to farest
git log 
git log --pretty=oneline

#git 查看某个 commit 的改动
git show 236f48e

#display the git command you have executed on the repository
git reflog

#perform the repository back and forth
git reset --hard HEAD@{2}
git reset --hard 236f48e

#remove file from git repository
git rm file

#to discard changes(add or rm or change) in working directory before git add operation
git checkout -- file

#to associate local repository with remote repository
#use https:https://github.com/qiaojianqj/learnGit.git
#use ssh:git@github.com:qiaojianqj/learnGit.git
git remote add origin https://github.com/qiaojianqj/learnGit.git

#push contents of the local repository to the remote repository
#first time, push:git push -u origin master
#later, push:git push origin master
git push -u origin master

#Often when push failed, Fetch from and merge with another repository or a local branch
git pull origin

#Often whe pull failed, to link the local branch with the remote branch
git branch --set-upstream-to=origin/develop develop

#clone a repository from remote repository to local using ssh
git clone git@github.com:qiaojianqj/learnGit.git

#look up branches
git branch

#create a new branch
git branch xxx

#switch to another branch
git checkout xxx

#create and switch to a new branch
git checkout -b xxx
#create local develop branch from remote develop branch
git checkout -b develop origin/develop

#merge a branch to current branch
#when the two branch both have modified the same place, merging will be failed,now we must resolve the conflict by hand, then add and commit
git merge xxx

#delete a branch
git branch -d xxx
#if want to drop a branch which has not been merged, use the following method to delete forcely
git branch -D xxx

#look up the branches merging graph
git log --graph
git log --graph --pretty=oneline --abbrev-commit 

#look up git command help
git help cmd

#on branch sub1 execute: git push origin sub1, this will create a new branch named sub1 on remote repository
git push origin sub1
#then on branch master execute: git push origin --delete sub1, this will detele the sub1 branch from the remote repository
git push origin --delete sub1
git push origin :sub1

#force disable "Fast Forward" mode when merge branch with --no-ff, at this time, git will generate a commit
git merge --no-ff -m "git merge --no-ff -m "comments"" 

#master branch - develop branch - bug branch
#when we are working on develop branch, now we have to resolve a bug at first, then we can hold the working dir by git stash, we can recover it after we have repaired the bug on the new created bug branch
git stash
git stash list
git stash pop
git stash apply stash@{0}
git stash drop
git stash clear

#look up remote repository info 
git remote -v

#create a tag on the default newest commit
git tag tag_name

#create a tag on the designated  commit
git tag tag_name commit_id

#look up all tags
git tag

#look up the designated tag info
git show tag_name

#delete a local repository tag
git tag -d tag_name

#push a tag to remote repository
git push origin tag_name

#push all tags to remote repository
git push origin --tags

#delete a remote repository tag
git push origin --delete  v0.1
git push origin :refs/tags/v0.1

#customize your own git
git config --global color.ui true
git config --global alias.st status
git config --global alias.co checkout
git config --global alias.ci commit
git config --global alias.br branch
git config --global alias.unstage 'reset HEAD'
git config --global alias.last 'log -1'

#ignore some special files
#create a file named .gitignore under the root git dir
#then add the wanna ignoring file name to the file
#for example

# Windows:
Thumbs.db
Desktop.ini
# Python:
*py[cod]
*.so
*.egg
dist
build
#My configurations:
db.ini
deploy_key_rsa

#at last, push the .gitignore file to the remote repository

#two tools
#Gitosis: manage ssh pub key
#Gitolite: manage access permission
  
